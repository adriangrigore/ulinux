#!/bin/sh
# shellcheck disable=2154,2123,2034,1007 source=/dev/null
#
# pkg - package manager for uLinux.

# shellcheck disable=SC1091
[ -f /etc/pkg.conf ] && . /etc/pkg.conf

# Defaults
PKG_PORTSDIR="${PKG_PORTSDIR:-/usr/ports}"
PKG_PKGSDIR="${PKG_PKGSDIR:-$PWD}"

is_abs() {
  if [ -n "$1" ]; then
    case "$1" in
      /*)
        true
        ;;
      *)
        false
        ;;
    esac
  fi
}

pkgfile_read() {
  [ -f Pkgfile ] || die "Pkgfile not found"

  . ./Pkgfile || die "syntax error in Pkgfile"

  [ -z "$name" ] && die "name not defined in Pkgfile"
  [ -z "$version" ] && die "version not defined in Pkgfile"
  [ -z "$release" ] && die "release not defined in Pkgfile"

  PATH= type build > /dev/null || die "build() not found in Pkgfile."

  if [ -n "$SKIP_DEPS" ]; then
    for dep in $depends; do
      pkg_list "$dep" > /dev/null || miss="$miss $dep"
    done
  fi
  [ -n "$miss" ] && die "missing dependencies:$miss"

  pkgfile=1
}

pkg_get() {
  for src in $source; do
    src_name=${src##*/}

    [ -f "$src_name" ] && continue

    if [ -z "${src##*://*}" ]; then
      log "downloading $src"

      if wget -O "$src_name.partial" -- "$src"; then
        mv -f "$src_name.partial" "$src_name"
      else
        rm -f "$src_name.partial"
        die "failed to download $src"
      fi
    else
      die "source file $src not found"
    fi
  done
}

pkg_verify() {
  pkg_checksum build/.checksum

  diff .checksum build/.checksum ||
    die "checksum of sources does not match checksum of package" \
      "run 'pkg checksum' to update checksums"
}

pkg_manifest() {
  cd "$og_pwd/build/pkg" > /dev/null

  printf '%s\n' "$version" > "$db_dir/$name/version"

  _() { find . -mindepth 1 "$@" | sed 's/^\.//'; }
  _ -not -type d > ../../.manifest

  printf '%s\n' "/$db_dir/$name/manifest" >> ../../.manifest

  _ -type d | sort -r >> ../../.manifest
}

pkg_extract() {
  cd build > /dev/null || die "can't access build dir"
  mkdir -p "pkg/$db_dir/$name"

  for pkg in $source; do
    file_name=${pkg##*/}

    case $pkg in
      *.tar | *.tar.?? | *.tar.??? | *.tar.???? | *.tgz)
        tar xf "../$file_name" -C src || die "couldn't extract $file_name"
        ;;

      *.zip)
        unzip -qd src "../$file_name" || die "couldn't extract $file_name"
        ;;

      *) cp -f "../$file_name" src ;;
    esac
  done

  _() { [ "$1" = "src/*" ] && log "warn: no source files found"; }
  _ src/*
}

pkg_build() {
  if [ -d build ]; then
    log "removing old build"
    rm -rf build || die "couldn't remove old build"
  fi

  mkdir -p build/src build/pkg || die "couldn't create required directories."

  cd src > /dev/null || die "can't access src dir."
  SRC=$og_pwd/build/src
  PKG=$og_pwd/build/pkg

  set -e errexit
  build
  blderr=$?
  set +e errexit

  pkg_manifest
  cd "$og_pwd" > /dev/null

  cp .manifest "build/pkg/$db_dir/$name/manifest"
  tar pcvf "${PKG_PKGSDIR}/${name}#$version-$release.tar.gz" \
    -C build/pkg . > /dev/null || die "failed to create package"

  log "successfuly built $name"
  log "package is at ${name}#$version-$release.tar.gz"
}

pkg_add() {
  if [ -z "$1" ] || [ "$1" = "." ]; then
    # shellcheck disable=SC2012
    if [ "$(ls -1 "$PKG_PKGSDIR"/*#*.tar.gz | wc -l)" -gt 1 ]; then
      if ls "$PKG_PKGSDIR"/"$(basename "$PWD")"#*.tar.gz > /dev/null; then
        set -- "$(ls "$PKG_PKGSDIR"/"$(basename "$PWD")"#*.tar.gz)"
      else
        die "cannot figure out which package to add"
      fi
    else
      set -- "$(ls "$PKG_PKGSDIR"/*#*.tar.gz)"
    fi
  fi

  if ! is_abs "$1"; then
    if [ -n "${1##*.tar.??}" ]; then
      # shellcheck disable=SC2012
      if [ "$(ls -1 "$PKG_PKGSDIR/$1"#*.tar.gz | wc -l)" -eq 1 ]; then
        pkg="$(ls "$PKG_PKGSDIR/$1"#*.tar.gz)"
      else
        die "cannot figure out which package to add"
      fi
    else
      pkg="${PKG_PKGSDIR}/$1"
    fi
  else
    pkg="$1"
  fi

  name=${pkg%_*.tar.gz*}
  name=${name##-}

  [ -f "$pkg" ] || die "file not found"
  [ -z "${pkg##*.tar.??}" ] || die "add requires a tarball"
  [ -n "$PKG_ROOT" ] && mkdir -p "$PKG_ROOT"

  mkdir -p "$PKG_ROOT/$db_dir" || die "couldn't create required directories."

  # Test tar file before extraction.
  tar tf "$pkg" > /dev/null || die "couldn't extract $name"

  [ -f "$PKG_ROOT/$db_dir/$name/manifest" ] && pkg_delete "$name"

  tar pxvf "$pkg" -C "$PKG_ROOT/" >&2 || die "couldn't extract $name"
  log "successfuly installed $name to $PKG_ROOT/"

  if [ -f post-install ]; then
    log "running post install hook"
    sh post-install
  fi
}

pkg_delete() {
  pkg_db="$PKG_ROOT/$db_dir/$1/manifest"

  [ -z "$1" ] && die "delete needs an argument"
  [ -f "$pkg_db" ] || die "package not installed"

  mkdir -p "$PKG_ROOT/$db_dir" || die "couldn't create required directories."

  while read -r line; do
    line=$PKG_ROOT/$line

    if [ -d "$line" ]; then
      find "$line" -mindepth 1 | read -r || rmdir "$line"

    elif [ -e "$line" ]; then
      rm -- "$line" || die "failed to remove package." \
        "check the manifest ($PKG_ROOT/var/db/pkg/$1)"
    fi
  done < "$pkg_db"

  log "removed $1"
}

pkg_list() {
  mkdir -p "$PKG_ROOT/$db_dir" || die "couldn't create required directories."

  cd "$PKG_ROOT/$db_dir" > /dev/null || die "can't access database"

  _() {
    read -r v < "$1/version"
    printf '%s\n' "$1 $v"
  }
  [ -n "$1" ] && ! [ -f "$1/version" ] && return 1

  for pkg in *; do
    [ -f "$1/version" ] && {
      _ "$1"
      break
    }
    [ -f "$pkg/version" ] || return 1
    _ "$pkg"
  done

  cd - > /dev/null
}

pkg_depends() {
  q="$1"

  if [ -z "$q" ]; then
    Pkgfile="./Pkgfile"
  else
    Pkgfile="$PKG_PORTSDIR/$q/Pkgfile"
  fi

  [ -f "$Pkgfile" ] || die "Pkgfile not found"
  . "$Pkgfile" || die "syntax error in Pkgfile"

  if [ ! -t 1 ]; then
    printf "%s\n" "$depends"
  else
    for dep in $depends; do
      is_installed=" "
      if pkg_list "$dep" > /dev/null; then
        is_installed="X"
      fi

      printf "[%s] %s\n" "$is_installed" "$dep"
    done
  fi
}

pkg_search() {
  q="$1"
  matches="$(mktemp -t pkg-search-XXXXXX)"
  for port in "$PKG_PORTSDIR"/*; do
    [ -d "$port" ] || continue
    grep -c -i -n -H -E "(# Description.*|URL|name=).*$q.*" "$port/Pkgfile"
  done |
    sort -n -r -t':' -k 2 |
    grep -v '^.*\:0$' |
    head \
      > "$matches"

  IFS=
  while read -r line; do
    port="$(echo "$line" | cut -f 1 -d':')"

    name="$(grep -E '^name=' "$port" | cut -f 2 -d'=')"
    vers="$(grep -E '^version=' "$port" | cut -f 2 -d'=')"
    desc="$(grep -i -E '# Description' "$port" | cut -f 2 -d':')"
    if [ -t 1 ]; then
      printf "%10s %10s %s\n" "$name" "$vers" "$desc"
    else
      printf "%s %s %s\n" "$name" "$vers" "$desc"
    fi
  done < "$matches"
}

pkg_clean() {
  rm -f ./*#*
  rm -rf ./"build"
  for src in $source; do
    rm -rf ./"${src##*/}"
  done
}

pkg_checksum() {
  mkdir -p build/src build/pkg || die "couldn't create required directories."

  : > "$1"

  for src in $source; do
    sha256sum -- "${src##*/}" >> "$1" || die "failed to generate checksums"
  done

  log "Saved checksums to $1"
}

enter_fakeroot() {
  #type fakeroot >/dev/null || die "fakeroot not installed"

  [ -z "$in_fakeroot" ] &&
    in_fakeroot=1 exec "$0" "$@"
}

clean() {
  [ "$pkgfile" = 1 ] || return
  [ -f "$og_pwd/Pkgfile" ] || return
  # shellcheck disable=SC2181
  [ ${blderr:-1} -eq 0 ] || return

  rm -rf "$og_pwd/build"
}

die() {
  printf '\033[31mERROR>\033[m %s\n' "$@" >&2
  exit 1
}

log() {
  printf '\033[32m=>\033[m %s\n' "$@"
}

args() {
  case $1 in
    a*) pkg_add "$2" ;;

    b*)
      pkgfile_read

      [ -f .checksum ] || die "checksum not found, run 'pkg checksum'"

      pkg_get
      pkg_verify
      pkg_extract
      pkg_build
      ;;

    cl*)
      pkgfile_read
      pkg_clean
      ;;

    c*)
      pkgfile_read SKIP_DEPS=1
      pkg_get
      pkg_checksum .checksum
      ;;

    dep*) pkg_depends "$2" ;;

    d*) pkg_delete "$2" ;;
    l*) pkg_list "$2" ;;
    s*) pkg_search "$2" ;;
    -v) printf '%s\n' "pkg 0.1.0" ;;

    *)
      log 'pkg [a]dd pkg.tar.gz' \
        'pkg [b]uild' \
        'pkg [c]hecksum' \
        'pkg [cl]ean' \
        'pkg [d]el pkg' \
        'pkg [dep]ends pkg' \
        'pkg [l]ist [pkg]' \
        'pkg [s]earch [pattern]'
      ;;
  esac
}

main() {
  enter_fakeroot "$@"

  og_pwd=$PWD
  db_dir=var/db/pkg

  trap clean EXIT
  clean

  args "$@"
}

main "$@"
